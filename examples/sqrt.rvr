~ * Calculating the square root of an integer.
~ * Adapted version of example from "Janus: a time-reversible language" by
~ * C. Lutz and H. Derby.

~ Calculates {num - floor(sqrt(num)), floor(sqrt(num))}
proc root {num: Int, root: Int}
    var bit := 01
    
    from bit = 01
    until bit ^ 02 > num   ~ find exponential ball park
    	bit <<= 01
    loop

    from bit ^ 02 > num
        bit >>= 01
        if (root + bit) ^ 02 <= num
            root += bit
        fi (root / bit) % 02 != 0
    until bit = 01
    loop
    
    drop bit
    num -= root ^ 02
return

proc main
    var num := 066
    var root := 0
    do root {num, root}
    drop root := 08
    drop num := 02
    ~root += 025
    ~undo root: num, root
return
