proc div_mod {mod: U32, quot: U32, const divisor: U32}
	from quot = 0
	until mod < divisor
		mod -= divisor
		quot += 01
	loop
return

proc u8_to_str_dec {int: U8, str: Str}
	var ones := 0
	var tens := 0
	var hundreds := 0
	
	int <> ones
	do div_mod(ones, int, 0A)
	
	int <> tens
	do div_mod(tens, int, 0A)
	
	int <> hundreds
	do div_mod(hundreds, int, 0A)
	
	str += hundreds as Char as Str
	str += tens as Char as Str
	str += ones as Char as Str
	
	drop hundreds := str.(0) - '0'
	drop tens := str.(01) - '0'
	drop ones := str.(02) - '0'
return

proc main
	var x := 0999A
	var q := 0
	do div_mod {x, q, 07}
	
	var xstr := ""
	var qstr := ""
		do uint_to_str_dec {x, xstr}
		do uint_to_str_dec {q, qstr}
		do show: x as Str
		do show: q as Str
		undo uint_to_str_dec {q, qstr}
		undo uint_to_str_dec {x, xstr}
	drop qstr := ""
	drop xstr := ""
	
	drop q := 0
	drop x := 0
return
