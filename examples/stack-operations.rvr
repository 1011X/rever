~ Various stack operations

~ Move n stack elements from one stack to another
proc move_stack {src: Stack, dst: Stack, const n: Int}
	var m := 0
    from m = 0
        var x := 0
        do pop {x, src}
        do push {x, dst}
        drop x := 0
        m += 01
    until m = n
    loop
    drop m := n
return

~ Reverse the elements of a stack
proc reverse {s: Stack}
    if !(empty s)
        var x := 0
        var n_move := size s - 01

        do pop {x, s}
        do reverse {s}
        ~ Place x at the bottom of the stack
        ~ by moving all elements to a temporary stack
        var ss := nil
        do move_stack {s, ss, n_move}
        do push {x, s}
        do move_stack {ss, s, n_move}
        drop ss := nil

        drop n_move := size s - 01
        drop x := 0
    fi !(empty s)
return

proc main
    var s: stack

    var x := 0
    x += 1
    do push(x, s)
    x += 2
    do push(x, s)
    x += 3
    do push(x, s)
    x += 4
    do push(x, s)
    x += 5
    do push(x, s)
    drop x := 0

    do show(s)
    do reverse(s)
return
